name: "Build & Release"

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'

permissions:
  contents: write
  
jobs:
  build-android:
    name: Build Android (APK & AAB)
    runs-on: ubuntu-24.04-arm
    environment: BuildEnv
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set Up Java
        uses: actions/setup-java@v3.12.0
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: aarch64-linux-android,armv7-linux-androideabi,x86_64-linux-android,i686-linux-android

      - name: Install dependencies from Apt
        run: |
          sudo apt-get update -y
          # Only essential packages for Flutter Android builds
          sudo apt-get install -y curl git unzip xz-utils zip

      - name: Clone Flutter
        run: |
          # Shallow-clone Flutter to reduce download size
          git clone --depth 1 --branch stable https://github.com/flutter/flutter.git $RUNNER_TEMP/flutter

          # Add Flutter to PATH
          echo "$RUNNER_TEMP/flutter/bin" >> $GITHUB_PATH

      - name: Install Flutter
        # Running "flutter doctor" will download Flutter's dependencies
        run: flutter doctor
      
      - name: Setup Android SDK
        run: |
          # Set Android SDK path
          echo "ANDROID_HOME=$HOME/android-sdk" >> $GITHUB_ENV
          echo "ANDROID_SDK_ROOT=$HOME/android-sdk" >> $GITHUB_ENV
          
          # Create SDK directory
          mkdir -p $HOME/android-sdk/cmdline-tools
          
          # Download Android command line tools
          cd $HOME/android-sdk/cmdline-tools
          wget -q https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip
          unzip -q commandlinetools-linux-11076708_latest.zip
          mv cmdline-tools latest
          rm commandlinetools-linux-11076708_latest.zip
          
          # Add to PATH
          echo "$HOME/android-sdk/cmdline-tools/latest/bin" >> $GITHUB_PATH
          echo "$HOME/android-sdk/platform-tools" >> $GITHUB_PATH

      - name: Accept Android Licenses
        run: |
          yes | $HOME/android-sdk/cmdline-tools/latest/bin/sdkmanager --licenses
          $HOME/android-sdk/cmdline-tools/latest/bin/sdkmanager "platform-tools" "platforms;android-34" "build-tools;34.0.0"
      
      - name: Install Dependencies
        run: flutter pub get

      - name: Decode Keystore
        run: |
          echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 --decode > android/app/keystore.jks
      
      - name: Create key.properties
        run: |
          echo "storePassword=${{ secrets.KEYSTORE_PASSWORD }}" > android/key.properties
          echo "keyPassword=${{ secrets.KEY_PASSWORD }}" >> android/key.properties
          echo "keyAlias=${{ secrets.KEY_ALIAS }}" >> android/key.properties
          echo "storeFile=keystore.jks" >> android/key.properties

      - name: Decode Firebase Configuration Files
        run: |
          echo "Decoding google-services.json..."
          echo "${{ secrets.GOOGLE_SERVICE_JSON }}" | base64 --decode > android/app/google-services.json
          echo "Decoding firebase_options.dart..."
          echo "${{ secrets.FIREBASE_OPTIONS }}" | base64 --decode > lib/firebase_options.dart
          echo "Verifying decoded files..."
          ls -lh android/app/google-services.json
          ls -lh lib/firebase_options.dart

      - name: Build APK
        run: flutter build apk --release --build-name="${{ github.event.inputs.version || github.ref_name }}" --build-number="${{ github.run_number }}"

      - name: Build App Bundle
        run: flutter build appbundle --release --build-name="${{ github.event.inputs.version || github.ref_name }}" --build-number="${{ github.run_number }}"

      - name: Upload Android Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: android-builds
          path: |
            build/app/outputs/flutter-apk/app-release.apk
            build/app/outputs/bundle/release/app-release.aab
          retention-days: 1

  build-ios:
    name: Build iOS (IPA)
    runs-on: macos-latest
    environment: BuildEnv
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: aarch64-apple-ios,aarch64-apple-ios-sim,x86_64-apple-ios

      - name: Setup Flutter SDK
        uses: flutter-actions/setup-flutter@v4
        with:
          channel: stable
          version: latest
      
      - name: Install Dependencies
        run: flutter pub get

      - name: Decode Firebase Configuration Files
        run: |
          echo "Decoding firebase_options.dart..."
          echo "${{ secrets.FIREBASE_OPTIONS }}" | base64 --decode > lib/firebase_options.dart
          echo "Decoding GoogleService-Info.plist..."
          echo "${{ secrets.GOOGLE_SERVICE_PLIST }}" | base64 --decode > ios/Runner/GoogleService-Info.plist
          echo "Verifying decoded files..."
          ls -lh lib/firebase_options.dart
          ls -lh ios/Runner/GoogleService-Info.plist

      - name: Clean iOS Build
        run: |
          cd ios
          rm -rf Pods Podfile.lock
          pod cache clean --all || true
          cd ..
          flutter clean

      - name: Build iOS IPA (No Code Sign)
        run: flutter build ipa --release --no-codesign --build-name="${{ github.event.inputs.version || github.ref_name }}" --build-number="${{ github.run_number }}"

      - name: Package IPA from Archive
        run: |
          cd build/ios/archive
          ARCHIVE_NAME=$(ls -t | grep ".xcarchive" | head -n 1)
          echo "Found archive: $ARCHIVE_NAME"
          mkdir -p Payload
          cp -r "$ARCHIVE_NAME/Products/Applications/Runner.app" Payload/
          zip -r Runner.ipa Payload
          mv Runner.ipa ../../../
          cd ../../..
          echo "IPA created at: $(pwd)/Runner.ipa"
          ls -lh Runner.ipa

      - name: Upload iOS Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ios-builds
          path: Runner.ipa
          retention-days: 1

  release:
    name: Create GitHub Release
    needs: [build-android, build-ios]
    runs-on: ubuntu-latest
    steps:
      - name: Download Android Artifacts
        uses: actions/download-artifact@v4
        with:
          name: android-builds
          path: android-builds

      - name: Download iOS Artifacts
        uses: actions/download-artifact@v4
        with:
          name: ios-builds
          path: ios-builds

      - name: Get Release Version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=${{ github.ref_name }}" >> $GITHUB_OUTPUT
          fi

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: Release ${{ steps.version.outputs.version }}
          draft: false
          prerelease: false
          files: |
            android-builds/app-release.apk
            android-builds/app-release.aab
            ios-builds/Runner.ipa
          token: ${{ secrets.GITHUB_TOKEN }}
