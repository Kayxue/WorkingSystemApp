name: "Build & Release"

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'

permissions:
  contents: write
  
jobs:
  build-android:
    name: Build Android (APK & AAB)
    runs-on: ubuntu-latest
    environment: BuildEnv
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set Up Java
        uses: actions/setup-java@v3.12.0
        with:
          distribution: 'temurin'
          java-version: '21'
      
      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: aarch64-linux-android,armv7-linux-androideabi,x86_64-linux-android,i686-linux-android

      - name: Setup Flutter SDK
        uses: flutter-actions/setup-flutter@v4
        with:
          channel: stable
          version: latest

      - name: Accept Android Licenses
        run: yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses || true
      
      - name: Install Dependencies
        run: flutter pub get

      - name: Decode Keystore
        run: |
          echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 --decode > android/app/keystore.jks
      
      - name: Create key.properties
        run: |
          echo "storePassword=${{ secrets.KEYSTORE_PASSWORD }}" > android/key.properties
          echo "keyPassword=${{ secrets.KEY_PASSWORD }}" >> android/key.properties
          echo "keyAlias=${{ secrets.KEY_ALIAS }}" >> android/key.properties
          echo "storeFile=keystore.jks" >> android/key.properties

      - name: Decode Firebase Configuration Files
        run: |
          echo "Decoding google-services.json..."
          echo "${{ secrets.GOOGLE_SERVICE_JSON }}" | base64 --decode > android/app/google-services.json
          echo "Decoding firebase_options.dart..."
          echo "${{ secrets.FIREBASE_OPTIONS }}" | base64 --decode > lib/firebase_options.dart
          echo "Verifying decoded files..."
          ls -lh android/app/google-services.json
          ls -lh lib/firebase_options.dart

      - name: Build APK
        run: flutter build apk --release --build-name="${{ github.event.inputs.version || github.ref_name }}" --build-number="${{ github.run_number }}"

      - name: Build App Bundle
        run: flutter build appbundle --release --build-name="${{ github.event.inputs.version || github.ref_name }}" --build-number="${{ github.run_number }}"

      - name: Verify Build Outputs
        run: |
          echo "Checking for APK file..."
          if [ -f "build/app/outputs/flutter-apk/app-release.apk" ]; then
            echo "✅ APK found: build/app/outputs/flutter-apk/app-release.apk"
            ls -lh build/app/outputs/flutter-apk/app-release.apk
          else
            echo "❌ APK not found at expected location"
            echo "Contents of build/app/outputs/flutter-apk/:"
            ls -la build/app/outputs/flutter-apk/ || echo "Directory does not exist"
            echo "Contents of build/app/outputs/:"
            ls -la build/app/outputs/ || echo "Directory does not exist"
            exit 1
          fi
          
          echo "Checking for AAB file..."
          if [ -f "build/app/outputs/bundle/release/app-release.aab" ]; then
            echo "✅ AAB found: build/app/outputs/bundle/release/app-release.aab"
            ls -lh build/app/outputs/bundle/release/app-release.aab
          else
            echo "❌ AAB not found at expected location"
            echo "Contents of build/app/outputs/bundle/release/:"
            ls -la build/app/outputs/bundle/release/ || echo "Directory does not exist"
            exit 1
          fi

      - name: Upload Android Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: android-builds
          path: |
            build/app/outputs/flutter-apk/app-release.apk
            build/app/outputs/bundle/release/app-release.aab
          retention-days: 1

  build-ios:
    name: Build iOS (IPA)
    runs-on: macos-latest
    environment: BuildEnv
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: aarch64-apple-ios,aarch64-apple-ios-sim,x86_64-apple-ios

      - name: Setup Flutter SDK
        uses: flutter-actions/setup-flutter@v4
        with:
          channel: stable
          version: latest
      
      - name: Install Dependencies
        run: flutter pub get

      - name: Decode Firebase Configuration Files
        run: |
          echo "Decoding firebase_options.dart..."
          echo "${{ secrets.FIREBASE_OPTIONS }}" | base64 --decode > lib/firebase_options.dart
          echo "Decoding GoogleService-Info.plist..."
          echo "${{ secrets.GOOGLE_SERVICE_PLIST }}" | base64 --decode > ios/Runner/GoogleService-Info.plist
          echo "Verifying decoded files..."
          ls -lh lib/firebase_options.dart
          ls -lh ios/Runner/GoogleService-Info.plist

      - name: Clean iOS Build
        run: |
          cd ios
          rm -rf Pods Podfile.lock
          pod cache clean --all || true
          cd ..
          flutter clean

      - name: Build iOS IPA (No Code Sign)
        run: flutter build ipa --release --no-codesign --build-name="${{ github.event.inputs.version || github.ref_name }}" --build-number="${{ github.run_number }}"

      - name: Package IPA from Archive
        run: |
          cd build/ios/archive
          ARCHIVE_NAME=$(ls -t | grep ".xcarchive" | head -n 1)
          echo "Found archive: $ARCHIVE_NAME"
          mkdir -p Payload
          cp -r "$ARCHIVE_NAME/Products/Applications/Runner.app" Payload/
          zip -r Runner.ipa Payload
          mv Runner.ipa ../../../
          cd ../../..
          echo "IPA created at: $(pwd)/Runner.ipa"
          ls -lh Runner.ipa

      - name: Upload iOS Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ios-builds
          path: Runner.ipa
          retention-days: 1

  release:
    name: Create GitHub Release
    needs: [build-android, build-ios]
    runs-on: ubuntu-latest
    steps:
      - name: Download Android Artifacts
        uses: actions/download-artifact@v5
        with:
          name: android-builds
          path: android-builds

      - name: Download iOS Artifacts
        uses: actions/download-artifact@v5
        with:
          name: ios-builds
          path: ios-builds

      - name: Verify Downloaded Artifacts
        run: |
          echo "=== Android Artifacts ==="
          echo "Contents of android-builds directory:"
          find android-builds -type f -name "*.apk" -o -name "*.aab" | head -10
          ls -la android-builds/ || echo "android-builds directory not found"
          
          echo "=== iOS Artifacts ==="
          echo "Contents of ios-builds directory:"
          find ios-builds -type f -name "*.ipa" | head -10
          ls -la ios-builds/ || echo "ios-builds directory not found"

      - name: Get Release Version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=${{ github.ref_name }}" >> $GITHUB_OUTPUT
          fi

      - name: Prepare Release Files
        run: |
          echo "Preparing release files..."
          
          # Find and copy APK file
          APK_FILE=$(find android-builds -name "*.apk" -type f | head -1)
          if [ -n "$APK_FILE" ]; then
            echo "Found APK: $APK_FILE"
            cp "$APK_FILE" ./app-release.apk
            echo "✅ APK file prepared"
          else
            echo "❌ No APK file found in android-builds"
            exit 1
          fi
          
          # Find and copy AAB file
          AAB_FILE=$(find android-builds -name "*.aab" -type f | head -1)
          if [ -n "$AAB_FILE" ]; then
            echo "Found AAB: $AAB_FILE"
            cp "$AAB_FILE" ./app-release.aab
            echo "✅ AAB file prepared"
          else
            echo "❌ No AAB file found in android-builds"
            exit 1
          fi
          
          # Find and copy IPA file
          IPA_FILE=$(find ios-builds -name "*.ipa" -type f | head -1)
          if [ -n "$IPA_FILE" ]; then
            echo "Found IPA: $IPA_FILE"
            cp "$IPA_FILE" ./Runner.ipa
            echo "✅ IPA file prepared"
          else
            echo "❌ No IPA file found in ios-builds"
            exit 1
          fi
          
          echo "Release files prepared:"
          ls -lh app-release.apk app-release.aab Runner.ipa

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: Release ${{ steps.version.outputs.version }}
          draft: false
          prerelease: false
          files: |
            app-release.apk
            app-release.aab
            Runner.ipa
          token: ${{ secrets.GITHUB_TOKEN }}
